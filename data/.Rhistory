predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
if (!(px == 10 & pa == 10)) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating =f_exp(px/10,pa/10)(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
}
cor.test(actual, predicted)
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
f = function(x,a) {a*(1-x)/(1-x*a)}
f_exp = function(x,a) {exp(f(px/10,pa/10)) / sum(exp(f(px/10,pa/10)) + exp(f(pa/10,px/10)))}
thomas = function(x,a) {1-x*(1-a)}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
if (!(px == 10 & pa == 10)) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
}
cor.test(actual, predicted)
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
f = function(x,a) {a*(1-x)/(1-x*a)}
f_exp = function(x,a) {ifelse(px == 10 & pa == 10, 1/2, exp(f(px/10,pa/10)) / sum(exp(f(px/10,pa/10)) + exp(f(pa/10,px/10))))}
thomas = function(x,a) {1-x*(1-a)}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
if (!(px == 10 & pa == 10)) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
}
cor.test(actual, predicted)
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
f = function(x,a) {a*(1-x)/(1-x*a)}
f_exp = function(x,a) {ifelse(px == 10 & pa == 10, 1/2, exp(f(px/10,pa/10)) / sum(exp(f(px/10,pa/10)) + exp(f(pa/10,px/10))))}
thomas = function(x,a) {1-x*(1-a)}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
show.settings()
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
par.settings = list(regions = list(col = c("orange", "yellow"))))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
par.settings = list(strip.background = list(col = c("orange", "yellow"))))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
par.settings = list(superpose.symbol = list(col = c("orange", "yellow"))))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("blue", "pink"))(100))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("blue", "pink"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("orange", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(50), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
?colorRampPalette
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#bc0000", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#870000", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10), xlab = "Prob. of green (focal)")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball (alternative)", ylab = "Prob. of green ball (focal)")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball\n(alternative)", ylab = "Prob. of green ball (focal)")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball\n(alternative)", ylab = "Prob. of green ball\n(focal)", zlab = "How causal is green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball\n(alternative)", ylab = "Prob. of green ball\n(focal)", zlab = "How causal\nis green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball\n(alternative)", ylab = list("Prob. of green ball\n(focal)", cex = 2), zlab = "How causal\nis green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue ball\n(alternative)", ylab = list("Prob. of green ball\n(focal)", cex = 1.5), zlab = "How causal\nis green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = "Prob. of blue \n(alternative)", ylab = list("Prob. of green (focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,0,10),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ddff00"))(100), light.source = c(10,0,10),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#00ff00"))(100), light.source = c(10,0,10),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(10,10,10),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(100,10,10),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(100,100,100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
?wireframe
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(0,0,1000),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100), light.source = c(0,0,0),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5), zlab = "How causal\nwas green?")
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.5), ylab = list("Prob. of green\n(focal)", cex = 1.5),
zlab = list("How causal\nwas green?", cex = 1.5))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0008ff", "#ff0000"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0008ff", "#ff0087"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0008ff", "#ff91ca"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0008ff", "#ff0087"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0004ff", "#ff0087"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0004ff", "#ff009d"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#0000ff", "#ff0000"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(1),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(1000),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(10000),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("", cex = 1.3), ylab = list("", cex = 1.3),
zlab = list("", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = F, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("", cex = 1.3), ylab = list("", cex = 1.3),
zlab = list("", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = F, drape = F,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("", cex = 1.3), ylab = list("", cex = 1.3),
zlab = list("", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = F, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("", cex = 1.3), ylab = list("", cex = 1.3),
zlab = list("", cex = 1.3))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100)
xlab = list("", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("", cex = 1.3))
View(df.graph)
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted = c(predicted, f_exp(px/10,pa/10))
#predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
actual
predicted
plot(predicted, actual)
scatterplot(predicted, actual)
plot(predicted, actual, type = "l")
require(car)
scatterplot(predicted, actual)
?scatterplot
scatterplot(predicted, actual, smoother = NULL)
scatterplot(predicted, actual, smoother = NULL, boxplots = F)
cor.test(actual, predicted)
.873 - .817
.056 / 1.96
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, thomas(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
.816 - .738
.078 / 1.96
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, px < pa)
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, as.numeric(x < pa))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, as.numeric(px < pa))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
.786 - .697
.089 / 1.96
rm(list=ls())
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all_dis/v1/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all_dis/v1/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
df.graph2 = data %>% group_by(focal_fac, alt_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = alt_fac, y = rating.mean, colour = focal_fac, group = focal_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .2)
rm(list=ls())
path = 'thomas_all/v2/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all/v2/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
length(unique(data$subject))
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_fire/v6/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(focal_high, c(0,1), c('Bad at math', 'Good at math')),
alt_fac = factor(alt_high, c(0,1), c('Bad at English', 'Good at English')),
alt2_fac = factor(alt2_high, c(0,1), c('Award for English', 'Award for math')))
demo = read.csv(paste0(path, 'demo.csv')) %>% arrange(subject) %>% mutate(total_time_actual = total_time / 60000)
naive = (demo %>% filter(experienced != 'Yes'))$subject
#ccpass = (demo %>% filter(cc1pass & cc2pass & cc3pass & cc4pass))$subject
df.graph = data %>% filter() %>%
group_by(alt2_fac) %>%
summarise(rating.mean = mean(rating), rating.se = se(rating),
rating2.mean = mean(rating2), rating2.se = se(rating2),
rating3.mean = mean(rating3), rating3.se = se(rating3))
ccpass = (demo %>% filter(cc1pass & cc2pass & cc3pass & cc4pass))$subject
length(ccpass)
df.graph = data %>% filter(ccpass) %>%
group_by(alt2_fac) %>%
summarise(rating.mean = mean(rating), rating.se = se(rating),
rating2.mean = mean(rating2), rating2.se = se(rating2),
rating3.mean = mean(rating3), rating3.se = se(rating3))
df.graph = data %>% filter(subject %in% ccpass) %>%
group_by(alt2_fac) %>%
summarise(rating.mean = mean(rating), rating.se = se(rating),
rating2.mean = mean(rating2), rating2.se = se(rating2),
rating3.mean = mean(rating3), rating3.se = se(rating3))
ggplot(data = df.graph, aes(x = alt2_fac, y = rating2.mean)) +
geom_line() +
geom_errorbar(aes(ymax = rating2.mean + rating2.se, ymin = rating2.mean - rating2.se), width = .1)
View(df.graph)
df.test = data %>% filter(subject %in% ccpass)
hist(df.test$rating[df.test$alt2_fac == 0])
hist(df.test$rating[df.test$alt2_fac == 'Award for math'])
hist(df.test$rating[df.test$alt2_fac == 'Award for English'])
hist(df.test$rating2[df.test$alt2_fac == 'Award for math'])
rm(list=ls())
deltap = function(x,a) {a*(1-x)}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, deltap(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all/v2/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, deltap(px/10,pa/10))
df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
f = function(x,a) {a*(1-x)/(1-x*a)}
f_exp = function(x,a) {ifelse(px == 10 & pa == 10, 1/2, exp(f(px/10,pa/10)) / sum(exp(f(px/10,pa/10)) + exp(f(pa/10,px/10))))}
thomas = function(x,a) {1-x*(1-a)}
deltap = function(x,a) {a*(1-x)}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, deltap(px/10,pa/10))
#df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
.81 - .73
.08 / 1.96
ppc = function(x,a) {1+a/(x*(1-a))}
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, ppc(px/10,pa/10))
#df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
df.test = data.frame(rating = NULL, alt_high = NULL, focal_high = NULL)
actual = c()
predicted = c()
for (px in 1:10) {
for (pa in 1:9) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
#predicted = c(predicted, f_exp(px/10,pa/10))
predicted = c(predicted, ppc(px/10,pa/10))
#df.test = rbind(df.test, data.frame(rating = f_exp(px/10,pa/10), alt_high = pa, focal_high = px))
}
}
cor.test(actual, predicted)
path = 'thomas_all_dis/v2/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
path = 'thomas_all_dis/v1/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'one', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'one', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
df.graph2 = data %>% group_by(focal_fac, alt_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = alt_fac, y = rating.mean, colour = focal_fac, group = focal_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .2)
ggplot(data = df.graph2, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .2)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all_dis/v1/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high == 10, 'high', ifelse(focal_high > 5, 'high', 'low')), c('low', 'high', 'one')),
alt_fac = factor(ifelse(alt_high == 10, 'high', ifelse(alt_high > 5, 'high', 'low')), c('low', 'high', 'one')))
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
df.graph2 = data %>% group_by(focal_fac, alt_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .2)
View(df.graph2)
model = lmer(rating ~ focal_high * alt_high + (1 + focal_high + alt_high | subject), data = data)
summary(model)
