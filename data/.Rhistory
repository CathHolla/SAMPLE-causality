xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_t, thomas(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, c(actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
# all the models
# "x" stands for Prob(green = 1); "a" stands for Prob(blue = 1)
our_model = function(x,a) {a*(1-x)/(1-x*a)}
#our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10))))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
#hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_t, thomas(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, c(actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
# all the models
# "x" stands for Prob(green = 1); "a" stands for Prob(blue = 1)
our_model = function(x,a) {a*(1-x)/(1-x*a)}
#our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10))))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
#hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, thomas(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, c(actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
# all the models
# "x" stands for Prob(green = 1); "a" stands for Prob(blue = 1)
our_model = function(x,a) {a*(1-x)/(1-x*a)}
#our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10))))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
#hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, c(actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
View(df.test)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, c(actual = actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
View(df.test)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, data.frame(actual, predicted_ours, predicted_icard, predicted_sp, predicted_dp))
}
}
View(df.test)
df.test = data.frame(actual = numeric(), predicted_ours = numeric(), predicted_icard = numeric(),
predicted_sp = numeric(), predicted_dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, data.frame(actual, our_model(x,a), icard(x,a), sp(x,a), dp(x,a)))
}
}
View(df.test)
df.test = data.frame(actual = numeric(), ours = numeric(), icard = numeric(),
sp = numeric(), dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, data.frame(actual = actual, ours = our_model(x,a), icard = icard(x,a), sp = sp(x,a), dp = dp(x,a)))
}
}
View(df.test)
df.test = data.frame(actual = numeric(), ours = numeric(), icard = numeric(),
sp = numeric(), dp = numeric())
actual = c()
predicted_ours = c()
predicted_icard = c()
predicted_sp = c()
predicted_dp = c()
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = c(actual, df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa])
predicted_ours = c(predicted_ours, our_model(px/10,pa/10))
predicted_icard = c(predicted_icard, icard(px/10,pa/10))
predicted_sp = c(predicted_sp, sp(px/10,pa/10))
predicted_dp = c(predicted_dp, dp(px/10,pa/10))
df.test = rbind(df.test, data.frame(actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa],
ours = our_model(x,a), icard = icard(x,a), sp = sp(x,a), dp = dp(x,a)))
}
}
View(df.test)
df.cors = data.frame(actual = numeric(), ours = numeric(), icard = numeric(), sp = numeric(), dp = numeric())
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
df.cors = rbind(df.test, data.frame(actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa],
ours = our_model(x,a), icard = icard(x,a), sp = sp(x,a), dp = dp(x,a)))
}
}
?cor.test
cor.test(actual ~ ours, data = df.cors)
cor.test(df.cors$actual, df.cors$ours)
cor.test(df.cors$actual, df.cors$icard)
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
# all the models
# "x" stands for Prob(green = 1); "a" stands for Prob(blue = 1)
our_model = function(x,a) {a*(1-x)/(1-x*a)}
#our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10))))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.cors = data.frame(actual = numeric(), ours = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
df.cors = rbind(df.test, data.frame(actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa],
ours = our_model(x,a), sp = sp(x,a), dp = dp(x,a), icard = icard(x,a), hh = hh(x,a)))
}
}
our_model = function(x,a) {a*(1-x)/(1-x*a)}
our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10)))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.cors = data.frame(actual = numeric(), ours = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
df.cors = rbind(df.test, data.frame(actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa],
ours = our_model(x,a), sp = sp(x,a), dp = dp(x,a), hh = hh(x,a), icard = icard(x,a)))
}
}
our_model = function(x,a) {a*(1-x)/(1-x*a)}
our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10)))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.cors = data.frame(actual = numeric(), ours = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
df.cors = rbind(df.cors, data.frame(actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa],
ours = our_model(x,a), sp = sp(x,a), dp = dp(x,a), hh = hh(x,a), icard = icard(x,a)))
}
}
cor.test(df.cors$actual, df.cors$sp) # .72
cor.test(df.cors$actual, df.cors$icard) # .72
cor.test(df.cors$actual, df.cors$dp) # .72
cor.test(df.cors$actual, df.cors$hh) # .72
?r.test
r.test(n=99, r12 = cor(df.cors$actual, df.cors$ours), r13 = cor(df.cors$actual, df.cors$icard), r23 = cor(df.cors$ours, df.cors$icard))
cor(df.cors$actual, df.cors$ours)
cor(df.cors$actual, df.cors$ours, na.rm = T)
?cpr
?cor
cor(df.cors$actual, df.cors$ours, use = "complete.obs")
cor.test(df.cors$actual, df.cors$ours) # .87
r.test(n=99, r12 = cor(df.cors$actual, df.cors$ours, use = "complete.obs"),
r13 = cor(df.cors$actual, df.cors$icard, use = "complete.obs"),
r23 = cor(df.cors$ours, df.cors$icard, use = "complete.obs"))
wireframe(rating ~ alt_high * focal_high, data = df.test, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
# check correlations b/w models and ratings
cor.test(df.cors$actual, df.cors$ours) # .87
cor.test(df.cors$actual, df.cors$hh) # .45
# check correlations b/w models and ratings
cor.test(df.cors$actual, df.cors$ours) # .87
cor.test(df.cors$actual, df.cors$sp) # .72
cor.test(df.cors$actual, df.cors$dp) # .62
cor.test(df.cors$actual, df.cors$hh) # .45
cor.test(df.cors$actual, df.cors$icard) # .74
ggplot(df.cors, aes = c(x = ours, y = actual)) +
geom_point()
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point()
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth() +
stat_smooth()
# scatterplots
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
stat_smooth()
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm")
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1))
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, .5, 1))
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, .5, 1)) +
scale_y_continuous(breaks = c(.3, .8))
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8))
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Our model's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = sp)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Our model's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = dp)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Our model's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = hh)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Our model's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = sp)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "SP's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = dp)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Delta-P and Power-PC's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = hh)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Halpern & Hitchcock's Predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = hh)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Halpern & Hitchcock's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = ours, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Icard et al.'s predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = sp, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "SP's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = dp, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Delta-P and Power-PC's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = hh, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Halpern & Hitchcock's predictions", y = "Actual ratings")
ggplot(df.cors, aes(x = icard, y = actual)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(breaks = c(0, 1)) +
scale_y_continuous(breaks = c(.3, .8)) +
labs(x = "Icard et al.'s predictions", y = "Actual ratings")
View(df.graph)
View(df.graph)
df.graph
gather
require(tidyr)
gather
?gather
matrix(3,3)
?matrix
matrix(0,3,3)
# Make 3D graph -----------------------------------------------------------
df.graph = data %>% group_by(focal_high, alt_high) %>% summarise(rating.mean = (mean(rating) + 1) / 9, rating.se = se(rating))
#trellis.par.set("axis.line",list(col=NA,lty=1,lwd=1))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=-60, x=-60, y=0),
#col.regions = colorRampPalette(c("#ff0000", "#ffff00"))(100),
xlab = list("Prob. of blue \n(alternative)", cex = 1.3), ylab = list("Prob. of green\n(focal)", cex = 1.3),
zlab = list("How causal\nwas green?", cex = 1.3))
wireframe(rating.mean ~ alt_high * focal_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0),
col.regions = colorRampPalette(c("red", "yellow"))(100), light.source = c(10,0,10))
# Test for linear effects -------------------------------------------------
linear.model = lmer(rating ~ focal_high + alt_high + (1 + focal_high + alt_high | subject), data = data)
summary(linear.model)
# Compute correlations ----------------------------------------------------
# all the models
# "x" stands for Prob(green = 1); "a" stands for Prob(blue = 1)
our_model = function(x,a) {a*(1-x)/(1-x*a)}
our_model_normalized = function(x,a) {exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10)))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.cors = data.frame(actual = numeric(), ours = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
df.modeling = matrix(0,10,10)
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa]
df.cors = rbind(df.cors, data.frame(actual = actual,
ours = our_model(x,a), sp = sp(x,a), dp = dp(x,a), hh = hh(x,a), icard = icard(x,a)))
df.modeling[px, pa] = actual
}
}
View(df.modeling)
# Save for model fitting --------------------------------------------------
write.table(df.modeling, 'test.csv')
# Save for model fitting --------------------------------------------------
write.table(df.modeling, 'test.csv', row.names = F)
df.modeling
is.matrix(df.modeling)
data.frame(df.modeling)
# Save for model fitting --------------------------------------------------
write.table(df.modeling, 'test.csv', row.names = F, sep = ",", col.names = F)
View(data)
View(data)
# Save for model fitting --------------------------------------------------
write.table(data %>% select(rating, focal_high, alt_high), 'ratings.csv', row.names = F, sep = ",", col.names = F)
# Save for model fitting --------------------------------------------------
write.table(data %>% select(rating, focal_high, alt_high) %>% arrange(focal_high, alt_high), 'ratings.csv', row.names = F, sep = ",", col.names = F)
write.table(data %>% mutate(rating = (rating + 1) / 10) %>%
select(rating, focal_high, alt_high) %>%
arrange(focal_high, alt_high), 'ratings.csv', row.names = F, sep = ",", col.names = F)
write.table(data %>% mutate(rating = (rating + 1) / 10) %>%
select(rating, focal_high, alt_high, subject) %>%
arrange(focal_high, alt_high), 'ratings.csv', row.names = F, sep = ",", col.names = F)
data %>% mutate(rating = (rating + 1) / 10) %>%
select(rating, focal_high, alt_high, subject) %>%
mutate(subject = as.numeric(subject)) %>%
arrange(subject)
write.table(data %>% mutate(rating = (rating + 1) / 10) %>%
select(rating, focal_high, alt_high, subject) %>%
mutate(subject = as.numeric(subject)) %>%
arrange(subject), 'ratings.csv', row.names = F, sep = ",", col.names = F)
our_model = function(x,a) {ifelse(a == 1 & x == 1, 1/2, a*(1-x)/(1-x*a))}
df.cors = data.frame(actual = numeric(), ours = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
df.modeling = matrix(0,10,10)
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa]
df.cors = rbind(df.cors, data.frame(actual = actual,
ours = our_model(x,a), sp = sp(x,a), dp = dp(x,a), hh = hh(x,a), icard = icard(x,a)))
df.modeling[px, pa] = actual
}
}
# check correlations b/w models and ratings
cor.test(df.cors$actual, df.cors$ours) # .87
r.test(n=99, r12 = cor(df.cors$actual, df.cors$ours, use = "complete.obs"),
r13 = cor(df.cors$actual, df.cors$icard, use = "complete.obs"),
r23 = cor(df.cors$ours, df.cors$icard, use = "complete.obs"))
our_model = function(x,a) {ifelse(a == 1 & x == 1, 1/2, a*(1-x)/(1-x*a))}
our_model_normed = function(x,a) {ifelse(a == 1 & x == 1, 1/2, exp(our_model(px/10,pa/10)) / sum(exp(our_model(px/10,pa/10)) + exp(our_model(pa/10,px/10))))}
icard = function(x,a) {1-x*(1-a)} # model from Icard et al.
hh = function(x,a) {ifelse(x > .5, 0, ifelse(x < a, 1, 1/2))} # model from Halpern & Hitchcock
sp = function(x,a) {a*(1-x)} # model from Spellman
dp = function(x,a) {a} # delta-P model (and Power-PC model)
df.cors = data.frame(actual = numeric(), ours = numeric(), ours_normed = numeric(), sp = numeric(), dp = numeric(), hh = numeric(), icard = numeric())
df.modeling = matrix(0,10,10)
for (px in 1:10) {
for (pa in 1:10) {
x = px/10
a = pa/10
actual = df.graph$rating.mean[df.graph$focal_high == px & df.graph$alt_high == pa]
df.cors = rbind(df.cors, data.frame(actual = actual,
ours = our_model(x,a), ours_normed = our_model_normed(x,a), sp = sp(x,a), dp = dp(x,a), hh = hh(x,a), icard = icard(x,a)))
df.modeling[px, pa] = actual
}
}
cor.test(df.cors$actual, df.cors$ours_normed) # .87
r.test(n=100, r12 = cor(df.cors$actual, df.cors$ours, use = "complete.obs"),
r13 = cor(df.cors$actual, df.cors$icard, use = "complete.obs"),
r23 = cor(df.cors$ours, df.cors$icard, use = "complete.obs"))
r.test(n=100, r12 = cor(df.cors$actual, df.cors$ours, use = "complete.obs"),
r13 = cor(df.cors$actual, df.cors$ours_normed, use = "complete.obs"),
r23 = cor(df.cors$ours_normed, df.cors$icard, use = "complete.obs"))
